#!/bin/bash

# Get the directory of the current script
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Determine PHP command to use
PHP_COMMAND="php"

# Check if config file exists
CONFIG_FILE="${DIR}/config.php"
if [ -f "$CONFIG_FILE" ]; then
    # Create a simple PHP script to extract the php_command setting
    PHP_EXTRACT=$(cat <<'EOPHP'
<?php
$config = include(__DIR__ . '/config.php');
echo isset($config['php_command']) ? $config['php_command'] : '';
EOPHP
)
    # Execute the inline PHP code to extract the PHP command
    CUSTOM_PHP=$(php -r "$PHP_EXTRACT" 2>/dev/null)
    if [ ! -z "$CUSTOM_PHP" ]; then
        PHP_COMMAND="$CUSTOM_PHP"
    fi
fi

# Check if PHP version is specified via command line argument
for arg in "$@"; do
    if [[ "$arg" == "--php="* ]]; then
        PHP_COMMAND="${arg#*=}"
        # Remove this argument from the arguments list that will be passed to the PHP script
        set -- "${@/$arg/}"
    fi
done

# Path to the actual PHP script
PHP_SCRIPT="${DIR}/.test-cleanup.php"

# If the PHP script doesn't exist, create it by copying the current file
if [ ! -f "$PHP_SCRIPT" ]; then
    # Copy the content of the current script but skip the first line (shebang)
    cat > "$PHP_SCRIPT" << 'EOF'
<?php
declare(strict_types=1);

// Set error reporting
error_reporting(E_ALL);
ini_set('display_errors', '1');

// Set base directory to script location for consistent relative paths
chdir(__DIR__);

// Include dependencies
require_once __DIR__ . '/lib/Helper.php';
require_once __DIR__ . '/lib/BackupResult.php';
require_once __DIR__ . '/lib/BackupInterface.php';
require_once __DIR__ . '/lib/AbstractBackup.php';
require_once __DIR__ . '/lib/FilesystemBackup.php';
require_once __DIR__ . '/lib/DatabaseBackup.php';
require_once __DIR__ . '/lib/Cleanup.php';
require_once __DIR__ . '/lib/BackupManager.php';
require_once __DIR__ . '/lib/TestCleanup.php';

use ServerBackup\Helper;
use ServerBackup\Cleanup;
use ServerBackup\TestCleanup;

// Display help message if requested
if (isset($argv[1]) && in_array($argv[1], ['-h', '--help', 'help'])) {
    echo <<<EOT
Server Backup - Cleanup Test Utility

This utility creates test backup files with various dates to verify that 
the cleanup functionality works correctly.

Usage:
  ./test-cleanup [options]

Options:
  --run-test    Create test backup files with various dates
  --run-cleanup Run the cleanup process to remove expired backups
  --all         Run both test creation and cleanup (default)
  --help        Display this help message
  --php=X       Use specific PHP version/command (e.g. --php=php83)

Example:
  ./test-cleanup --all

EOT;
    exit(0);
}

// Parse command line options
$options = getopt('', ['run-test', 'run-cleanup', 'all', 'php:']);
$runTest = isset($options['run-test']) || isset($options['all']) || empty($options);
$runCleanup = isset($options['run-cleanup']) || isset($options['all']) || empty($options);

// Load configuration
$configFile = __DIR__ . '/config.php';

if (!file_exists($configFile)) {
    Helper::logError("Configuration file '{$configFile}' does not exist. Please copy config.example.php to config.php and configure it.");
    exit(1);
}

$config = include $configFile;

if (empty($config) || !is_array($config)) {
    Helper::logError("Invalid configuration format. Please check your config.php file.");
    exit(1);
}

try {
    // Run tests if requested
    if ($runTest) {
        echo "\n=== CREATING TEST BACKUP FILES ===\n\n";
        $tester = new TestCleanup($config);
        $results = $tester->run();
        
        echo "\nTest Summary:\n";
        echo "------------\n";
        echo "Files created: {$results['files_created']}\n";
        echo "Test directories:\n";
        foreach ($results['test_directories'] as $dir) {
            echo "  - {$dir}\n";
        }
        echo "\nRetention Policies:\n";
        echo "  - Keep daily backups: {$results['retention_policies']['keep_daily_backups']} days\n";
        echo "  - Keep monthly backups: {$results['retention_policies']['keep_monthly_backups']} months\n";
        echo "\nTest files have been created with a mix of dates to test cleanup functionality:\n";
        echo "  - Files with 'daily' in name: Recent daily backups (within {$results['retention_policies']['keep_daily_backups']} days) - SHOULD BE KEPT\n";
        echo "  - Files with 'daily-to-delete' in name: Old daily backups - SHOULD BE DELETED\n";
        echo "  - Files with 'monthly' in name: Recent monthly backups (within {$results['retention_policies']['keep_monthly_backups']} months) - SHOULD BE KEPT\n";
        echo "  - Files with 'monthly-to-delete' in name: Old monthly backups - SHOULD BE DELETED\n";
        echo "\nPlease now run with --run-cleanup to test the cleanup process.\n";
    }
    
    // Run cleanup if requested
    if ($runCleanup) {
        echo "\n=== RUNNING CLEANUP PROCESS ===\n\n";
        $cleanup = new Cleanup($config);
        $deletedFiles = $cleanup->run();
        
        echo "\nCleanup Summary:\n";
        echo "--------------\n";
        echo "Files deleted: " . count($deletedFiles) . "\n";
        
        if (count($deletedFiles) > 0) {
            echo "\nDeleted files:\n";
            foreach ($deletedFiles as $file) {
                echo "  - " . basename($file) . "\n";
            }
        }
    }
    
    echo "\nTest completed successfully.\n";
    exit(0);
} catch (\Throwable $e) {
    Helper::logError("Fatal error: " . $e->getMessage());
    Helper::logDebug("Stack trace: " . $e->getTraceAsString());
    exit(1);
}
EOF
fi

# Check if PHP version is sufficient (need 8.0+ for match expression)
if [[ "$("$PHP_COMMAND" -r 'echo version_compare(PHP_VERSION, "8.0.0", "<") ? "too_old" : "ok";')" == "too_old" ]]; then
    echo "Error: Your PHP version is too old. This script requires PHP 8.0 or higher."
    echo "Current PHP command: $PHP_COMMAND, Version: $("$PHP_COMMAND" -r 'echo PHP_VERSION;')"
    echo ""
    echo "Solutions:"
    echo "1. Use a newer PHP version by adding to config.php:"
    echo "   'php_command' => 'php83',"
    echo ""
    echo "2. Or specify PHP version on command line:"
    echo "   ./test-cleanup --php=php83 ${@}"
    echo ""
    exit 1
fi

# Execute the PHP script with the provided arguments
"$PHP_COMMAND" "$PHP_SCRIPT" "$@"